A.
function handleUseEffect()   triggered by useEffect()
 let space (= activeSpace)

--> setDisplayMessage (4x)
--> setFirstPlayerTurn(!firstPlayerTurn) (1x)


B. & C. both in--> function handleClickSquare()
B.
function movePieces(piecesPickedUp-#, piecesPickedUp-array, spaceId, spaceFound-pieces array)
• splice from source square array

• flatten wall if top souce piece is capstone
• add one piece to destinaion square

• update spaces.pieces array for both source & dest squares
--> determineMoveSecondSquares(updatedSpaces, pieceMoveAndCount, spaceFound)
--> setSpaces(updatedSpacesCombo)
--> setPieceMoveAndCount({ ...obj, space: spaceId, piecesToMove: removedPieces } })

C.
function movePiecesSecondSquare(piecesPickedUp-array, spaceId, spaceFound-pieces array)
• shift one piece from stack

• flatten wall if top souce piece is capstone
• add one piece from stack to destinaion square

• update spaces.pieces array for dest square
--> determineMoveSecondSquares(updatedSpaces, pieceMoveAndCount, spaceFound)
--> setSpaces(updatedSpacesCombo)
--> setPieceMoveAndCount({ ...obj, space: spaceId, piecesToMove: stackPieces} })


D.
function createPiece(type)
• create array of all pieces (to determine piece #)
• filter-out black/white pieces

--> create instance of TakPiece class
    • determine if move #1 or #2
    • determine next black/white piece number
    • return new TakPiece


E.
function handleClickSquare(e)
 let space = e.target.id
 const spaceFound = spaces.find((obj) => obj.space === space)

A1. if (spaceFound.pieces.length < 1 && pieceMoveAndCount.piecesToMove.length < 1)
--> setPieceMove&Count=#0
• createPiece & code
--> add new piece to space.pieces array / activate space
--> setDisplayMessage('')
--> setFirstPlayerTurn(!firstPlayerTurn)

A2. if (empty space & reached max pieces)
--> setPieceMove&Count=#98
--> setDisplayMessage('You have reached the maximum of 21 pieces!')

A3. if (spaceFound.pieces.length > 0 && (pieceMoveAndCount.number === 0 || pieceMoveAndCount.number === 99 || pieceMoveAndCount.number === undefined))
--> setPieceMove&Count=#99
--> activate space	(used just to set the square active for TakSpaceDisplay)
--> setDisplayMessage	('Click the bottom-most piece you want to move')

A4. if (pieceMoveAndCount.number > 0 && pieceMoveAndCount.piecesToMove.length > 0 && (pieceMoveAndCount.number === pieceMoveAndCount.piecesToMove.length))
--> activate space
--> movePieces()
--> setDisplayMessage()

A5. if (pieceMoveAndCount.number > 0 && pieceMoveAndCount.piecesToMove.length > 0 && (pieceMoveAndCount.number > pieceMoveAndCount.piecesToMove.length))
--> activate space
--> movePiecesSecondSquare()
--> setDisplayMessage()

SUMMARY OF ABOVE

A1. • add a piece
	no pieces	no move count

A2. • "reached max pieces"

A3. • "this square already has pieces, select piece to move"
	pieces		no move count

A4. • move pieces 1st square
	count>0		pieces_to_move>0	move count=pieces_to_move

A5. move pieces 2nd+ square
	count>0		pieces_to_move>0	move count>pieces_to_move


========================================================================

E.
function handleNumberPieceMoveClick(e)
 const target = e.target.id
 const space = e.target.parentElement.id

--> determine potential move spaces
--> activate space
• calculate numberSelected
• splice number from  pieces array
--> setPieceMoveAndCount((obj) => { return { piecesToMove: [...removedPieces], space: space, number: numberSelected } })

F.
• const squareDivArray (mapping the <div>'s)



NOTES
=====
*** if (pieceMoveAndCount.number > pieceMoveAndCount.piecesToMove.length)
	if (pieceMoveAndCount.number > pieceMoveAndCount.piecesToMove.length)
		....force user to continue to lay down pieces
		...turn of all other handleClick functionality
	else {....allow user to select other handleClick functionality}
---------------------------------------------------------------------

changes made for array reversal
===============================
• I cannot get array.reverse().map() to reverse the actual <div>/node output in react (the console.log arrays get reversed correctly).
I have to instead either:
 a. reverse the(<div>/nodes) arrays using css styling:   display: flex;  flex-direction: column;
 b. use the new toReversed() method (see steps 1-3 below)

1. array.toReversed().map()

2. css
  display: flex;
  flex-direction: column-reverse;
to
  display: flex;
  flex-direction: column;
  justify-content: flex-end;

3.
// const numberSelected = piecesArrayLength - parseInt(pieceId)
to
const numberSelected = parseInt(pieceId)

// id={index}
to
id={index + 1}

======================================

• loop that stops when first if() statment fails
function looper2() {
  let newArr = []
  for (let i = 0; i <= arr.length - 1; i++) {
    if (arr[i].pieces.length < 1) {
      newArr.push(arr[i].space)
    } else {break}
  }
}
looper2()

• update array of objects (newArr) with objects in another array (newArr2)
for (let item of newArr2) {
    let index = newArr.findIndex((sp) => sp.space === item.space)
    newArr.splice(index, 1, item)
}

======================================

done-1. cannot stack flat on top of wall/capstone (when capstone on top)
done-2. capstone flattens wall

=======================================
pieceMoveAndCount.number =
  undefined		Welcome to Tak!
  >0 =moveCount		You have selected...pieces
  >0 >moveCount		[ move() function...below]
  >0, moveCount=0	You have placed the last piece in the move stack
  0			You have added a new piece to...
  99			Click the bottom-most piece you want to move

-----------

• add a piece
 0-pieces  0-moveCount
 0-pieces  +number = +moveCount  moveSquare:false
	setNumber: 0
	setDisplayMessage('')

• this square already has pieces, select piece to move
 +pieces  0-moveCount
 +number 0-pieces_to_move
 number: 99
 number: undefined
	setNumber: 99
	setDisplayMessage('Click the bottom-most piece you want to move')

• first piece move (+number: = +pieces_to_move)
 +number = +moveCount  moveSquare:true
 	movePieces()
	setDisplayMessage(`You have moved from ${pieceMoveAndCount.space} to ${spaceId}`)

• second piece move (+number: > +pieces_to_move)
+number > +moveCount
	movePiecesSecondSquare()
	setDisplayMessage(`You have moved from ${pieceMoveAndCount.space} to ${spaceId}`)
-----------

--Welcome to Tak!
source:""
space:""
number:undefined
piecesToMove:[]

--Click the bottom-most piece you want to move
Welcome to Tak!
source:""
space:""
number:99
piecesToMove:[]

--You have selected 3 pieces from x3y5
source:"x3 y5"
space:"x3 y5"
number:3
piecesToMove:["WF7","BF7","WF8"]

• ERROR--> when I click a non-determine1(f)

--You have moved from x3 y5 to x3 y4
source:"x3 y5"
space:"x3 y4"
number:3
piecesToMove:["BF7","WF8"]

-- You have placed the last piece in the move stack
source:"x3 y5"
space:"x3 y3"
number:3
piecesToMove:[]

=======================================================
Game Win equation

a. check to see if color has x1-5 or y1-5
b. if y1-5 (up-down) loop through the x-axis to determine if:
	1. the y-axis is -1 away
	or
	2. the x-axis is +1/-1 away
b. if x-5 (across) loop through the y-axis to determine if:
	1. the x-axis is +1 away
	or
	2. the y-axis is +1/-1 away

if x=x y-1/+1
if y=y x-1/+1

-------
min 5
mz 9


examples not working
====================

Y,Y,N,N,Y
Y,N,Y,Y,N
N,N,N,Y,N
Y,Y,Y,Y,N
Y,N,N,N,N

Y,Y,N,N,Y
Y,N,Y,Y,N
N,N,N,Y,N
Y,Y,Y,Y,N
Y,N,N,N,N



5,4,    1
5, ,3,2,
      2
5,4,3,2
5

 0, 1,-1,-1, 1
 1, x, 1, 0, x
-1,-1,-1, 0, x
 0,-1,-1,-1,-1

 0, 1,-1,-1, 1  1, x, 1, 0, x
 1, x, 1, 0, x  0, 1,-1,-1, 1

 1, x, 1, 0, x -1,-1,-1, 0, x
-1,-1,-1, 0, x  1, x, 1, 0, x



5,0,0



x,-,-,-,1
x,4,3,x,-
-,-,-,x,-
x,4,3,x,-
x,-,-,-,-

x,x,    1
x,x,3,x,
      x
x,4,3,x
x

x,4,    x
x, ,3,x,x
      x
x,4,3,x
x

x,4,x    1
x, ,x,x,
      x
x,4,3,x
x


----------------------

5,4,    1
5, ,3,2,
      2
5,4,3,2
5


5
2
2
5

  4    
5  3  
      
 4,3


5-2 =  3  1/-1 or 4/3
2-2 =  0
2-5 = -3


2,1,1,1,1
1,0,1,2,0
1,1,1,2,0
2,1,1,1,0






every row has an x=+1/-1 & y=y



• break it down into 3 columns
matchesQ = A - B
matchesU = B - C
matches1 = Q - U	true

matchesW = B - C
matchesX = C - D
matches2 = W - X	true

matchesY = C - D
matchesZ = D - E
matches3 = Y - Z	true




















